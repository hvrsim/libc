// This file is autogenerated!
// All changes made will be lost (eventually)!

use sighandler_t;

pub type c_char = i8;
pub type c_long = i64;
pub type c_ulong = u64;
pub type blkcnt64_t = i64;
pub type rlimit64 = ::rlimit;
pub type rlim64_t = ::rlim_t;
pub type ino64_t = ::ino_t;
pub type dirent64 = ::dirent;
pub type stat64 = ::stat;
pub type statfs64 = ::statfs;
pub type statvfs64 = ::statvfs;
pub type idtype_t = ::c_uint;
pub const RTLD_DEFAULT: *mut ::c_void = 0i64 as *mut ::c_void;
pub const RLIM_INFINITY: ::rlim_t = !0;

pub type Elf32_Half = u16;
pub type Elf32_Word = u32;
pub type Elf32_Off = u32;
pub type Elf32_Addr = u32;

pub type Elf64_Half = u16;
pub type Elf64_Word = u32;
pub type Elf64_Off = u64;
pub type Elf64_Addr = u64;
pub type Elf64_Xword = u64;

s! {
    pub struct Elf32_Phdr {
        pub p_type: Elf32_Word,
        pub p_offset: Elf32_Off,
        pub p_vaddr: Elf32_Addr,
        pub p_paddr: Elf32_Addr,
        pub p_filesz: Elf32_Word,
        pub p_memsz: Elf32_Word,
        pub p_flags: Elf32_Word,
        pub p_align: Elf32_Word,
    }

    pub struct Elf64_Phdr {
        pub p_type: Elf64_Word,
        pub p_flags: Elf64_Word,
        pub p_offset: Elf64_Off,
        pub p_vaddr: Elf64_Addr,
        pub p_paddr: Elf64_Addr,
        pub p_filesz: Elf64_Xword,
        pub p_memsz: Elf64_Xword,
        pub p_align: Elf64_Xword,
    }
}

s! {
    pub struct dl_phdr_info {
        #[cfg(target_pointer_width = "64")]
        pub dlpi_addr: Elf64_Addr,
        #[cfg(target_pointer_width = "32")]
        pub dlpi_addr: Elf32_Addr,

        pub dlpi_name: *const ::c_char,

        #[cfg(target_pointer_width = "64")]
        pub dlpi_phdr: *const Elf64_Phdr,
        #[cfg(target_pointer_width = "32")]
        pub dlpi_phdr: *const Elf32_Phdr,

        #[cfg(target_pointer_width = "64")]
        pub dlpi_phnum: Elf64_Half,
        #[cfg(target_pointer_width = "32")]
        pub dlpi_phnum: Elf32_Half,

        pub dlpi_adds: ::c_ulonglong,
        pub dlpi_subs: ::c_ulonglong,
        pub dlpi_tls_modid: ::size_t,
        pub dlpi_tls_data: *mut ::c_void,
    }
}

f! {
    pub fn CMSG_NXTHDR(mhdr: *const msghdr, cmsg: *const cmsghdr) -> *mut cmsghdr {
        if ((*cmsg).cmsg_len as usize) < ::mem::size_of::<cmsghdr>() {
            return 0 as *mut cmsghdr;
        };
        let next = (cmsg as usize + super::CMSG_ALIGN((*cmsg).cmsg_len as usize)) as *mut cmsghdr;
        let max = (*mhdr).msg_control as usize + (*mhdr).msg_controllen as usize;
        if (next.offset(1)) as usize > max ||
            next as usize + super::CMSG_ALIGN((*next).cmsg_len as usize) > max {
            0 as *mut cmsghdr
        } else {
            next as *mut cmsghdr
        }
    }
}

align_const! {
    pub const PTHREAD_MUTEX_INITIALIZER: pthread_mutex_t = pthread_mutex_t {
        size: [0; 16],
    };
    pub const PTHREAD_COND_INITIALIZER: pthread_cond_t = pthread_cond_t {
        size: [0; 12],
    };
    pub const PTHREAD_RWLOCK_INITIALIZER: pthread_rwlock_t = pthread_rwlock_t {
        size: [0; 12],
    };
}
s_no_extra_traits! {
    pub struct ifreq {
        pub ifru_addr: ::sockaddr,
        pub ifru_dstaddr: ::sockaddr,
        pub ifru_broadaddr: ::sockaddr,
        pub ifru_netmask: ::sockaddr,
        pub ifru_hwaddr: ::sockaddr,
        pub ifru_flags: ::c_short,
        pub ifru_ivalue: ::c_int,
        pub ifru_mtu: ::c_int,
        pub ifru_map: ::ifmap,
        pub ifru_slave: [::c_char; 16],
        pub ifru_newname: [::c_char; 16],
        pub ifru_data: *mut ::c_char,
    }
}

impl ::fmt::Debug for ifreq {
    fn fmt(&self, f: &mut ::fmt::Formatter<'_>) -> ::fmt::Result {
        f.debug_struct("ifreq").finish()
    }
}

safe_f! {
    pub {const} fn makedev(major: ::c_uint, minor: ::c_uint) -> ::dev_t {
        let major = major as ::dev_t;
        let minor = minor as ::dev_t;
        let mut dev = 0;
        dev |= (major & 0x00000fff) << 8;
        dev |= (major & 0xfffff000) << 32;
        dev |= (minor & 0x000000ff) << 0;
        dev |= (minor & 0xffffff00) << 12;
        dev
    }
}

f! {
    pub fn major(dev: ::dev_t) -> ::c_uint {
        let mut major = 0;
        major |= (dev & 0x00000000000fff00) >> 8;
        major |= (dev & 0xfffff00000000000) >> 32;
        major as ::c_uint
    }

    pub fn minor(dev: ::dev_t) -> ::c_uint {
        let mut minor = 0;
        minor |= (dev & 0x00000000000000ff) >> 0;
        minor |= (dev & 0x00000ffffff00000) >> 12;
        minor as ::c_uint
    }
}

// abi-bits/access.h

// abi-bits/auxv.h
pub const AT_PLATFORM: ::c_int = 15;
pub const AT_HWCAP: ::c_int = 16;
pub const AT_CLKTCK: ::c_int = 17;
pub const AT_FPUCW: ::c_int = 18;
pub const AT_SECURE: ::c_int = 23;
pub const AT_RANDOM: ::c_int = 25;
pub const AT_EXECFN: ::c_int = 31;
pub const AT_SYSINFO_EHDR: ::c_int = 33;

// abi-bits/blkcnt_t.h
pub type blkcnt_t = i64;

// abi-bits/blksize_t.h
pub type blksize_t = ::c_long;

// abi-bits/clockid_t.h

// abi-bits/dev_t.h
pub type dev_t = u64;

// abi-bits/epoll.h
pub const EPOLL_CLOEXEC: ::c_int = 0o2000000;

// abi-bits/errno.h
pub const EPERM: ::c_int = 1;
pub const ENOENT: ::c_int = 2;
pub const ESRCH: ::c_int = 3;
pub const EINTR: ::c_int = 4;
pub const EIO: ::c_int = 5;
pub const ENXIO: ::c_int = 6;
pub const E2BIG: ::c_int = 7;
pub const ENOEXEC: ::c_int = 8;
pub const EBADF: ::c_int = 9;
pub const ECHILD: ::c_int = 10;
pub const EAGAIN: ::c_int = 11;
pub const ENOMEM: ::c_int = 12;
pub const EACCES: ::c_int = 13;
pub const EFAULT: ::c_int = 14;
pub const ENOTBLK: ::c_int = 15;
pub const EBUSY: ::c_int = 16;
pub const EEXIST: ::c_int = 17;
pub const EXDEV: ::c_int = 18;
pub const ENODEV: ::c_int = 19;
pub const ENOTDIR: ::c_int = 20;
pub const EISDIR: ::c_int = 21;
pub const EINVAL: ::c_int = 22;
pub const ENFILE: ::c_int = 23;
pub const EMFILE: ::c_int = 24;
pub const ENOTTY: ::c_int = 25;
pub const ETXTBSY: ::c_int = 26;
pub const EFBIG: ::c_int = 27;
pub const ENOSPC: ::c_int = 28;
pub const ESPIPE: ::c_int = 29;
pub const EROFS: ::c_int = 30;
pub const EMLINK: ::c_int = 31;
pub const EPIPE: ::c_int = 32;
pub const EDOM: ::c_int = 33;
pub const ERANGE: ::c_int = 34;
pub const EDEADLK: ::c_int = 35;
pub const ENAMETOOLONG: ::c_int = 36;
pub const ENOLCK: ::c_int = 37;
pub const ENOSYS: ::c_int = 38;
pub const ENOTEMPTY: ::c_int = 39;
pub const ELOOP: ::c_int = 40;
pub const EWOULDBLOCK: ::c_int = EAGAIN;
pub const ENOMSG: ::c_int = 42;
pub const EIDRM: ::c_int = 43;
pub const ECHRNG: ::c_int = 44;
pub const EL2NSYNC: ::c_int = 45;
pub const EL3HLT: ::c_int = 46;
pub const EL3RST: ::c_int = 47;
pub const ELNRNG: ::c_int = 48;
pub const EUNATCH: ::c_int = 49;
pub const ENOCSI: ::c_int = 50;
pub const EL2HLT: ::c_int = 51;
pub const EBADE: ::c_int = 52;
pub const EBADR: ::c_int = 53;
pub const EXFULL: ::c_int = 54;
pub const ENOANO: ::c_int = 55;
pub const EBADRQC: ::c_int = 56;
pub const EBADSLT: ::c_int = 57;
pub const EDEADLOCK: ::c_int = EDEADLK;
pub const EBFONT: ::c_int = 59;
pub const ENOSTR: ::c_int = 60;
pub const ENODATA: ::c_int = 61;
pub const ETIME: ::c_int = 62;
pub const ENOSR: ::c_int = 63;
pub const ENONET: ::c_int = 64;
pub const ENOPKG: ::c_int = 65;
pub const EREMOTE: ::c_int = 66;
pub const ENOLINK: ::c_int = 67;
pub const EADV: ::c_int = 68;
pub const ESRMNT: ::c_int = 69;
pub const ECOMM: ::c_int = 70;
pub const EPROTO: ::c_int = 71;
pub const EMULTIHOP: ::c_int = 72;
pub const EDOTDOT: ::c_int = 73;
pub const EBADMSG: ::c_int = 74;
pub const EOVERFLOW: ::c_int = 75;
pub const ENOTUNIQ: ::c_int = 76;
pub const EBADFD: ::c_int = 77;
pub const EREMCHG: ::c_int = 78;
pub const ELIBACC: ::c_int = 79;
pub const ELIBBAD: ::c_int = 80;
pub const ELIBSCN: ::c_int = 81;
pub const ELIBMAX: ::c_int = 82;
pub const ELIBEXEC: ::c_int = 83;
pub const EILSEQ: ::c_int = 84;
pub const ERESTART: ::c_int = 85;
pub const ESTRPIPE: ::c_int = 86;
pub const EUSERS: ::c_int = 87;
pub const ENOTSOCK: ::c_int = 88;
pub const EDESTADDRREQ: ::c_int = 89;
pub const EMSGSIZE: ::c_int = 90;
pub const EPROTOTYPE: ::c_int = 91;
pub const ENOPROTOOPT: ::c_int = 92;
pub const EPROTONOSUPPORT: ::c_int = 93;
pub const ESOCKTNOSUPPORT: ::c_int = 94;
pub const EOPNOTSUPP: ::c_int = 95;
pub const ENOTSUP: ::c_int = EOPNOTSUPP;
pub const EPFNOSUPPORT: ::c_int = 96;
pub const EAFNOSUPPORT: ::c_int = 97;
pub const EADDRINUSE: ::c_int = 98;
pub const EADDRNOTAVAIL: ::c_int = 99;
pub const ENETDOWN: ::c_int = 100;
pub const ENETUNREACH: ::c_int = 101;
pub const ENETRESET: ::c_int = 102;
pub const ECONNABORTED: ::c_int = 103;
pub const ECONNRESET: ::c_int = 104;
pub const ENOBUFS: ::c_int = 105;
pub const EISCONN: ::c_int = 106;
pub const ENOTCONN: ::c_int = 107;
pub const ESHUTDOWN: ::c_int = 108;
pub const ETOOMANYREFS: ::c_int = 109;
pub const ETIMEDOUT: ::c_int = 110;
pub const ECONNREFUSED: ::c_int = 111;
pub const EHOSTDOWN: ::c_int = 112;
pub const EHOSTUNREACH: ::c_int = 113;
pub const EALREADY: ::c_int = 114;
pub const EINPROGRESS: ::c_int = 115;
pub const ESTALE: ::c_int = 116;
pub const EUCLEAN: ::c_int = 117;
pub const ENOTNAM: ::c_int = 118;
pub const ENAVAIL: ::c_int = 119;
pub const EISNAM: ::c_int = 120;
pub const EREMOTEIO: ::c_int = 121;
pub const EDQUOT: ::c_int = 122;
pub const ENOMEDIUM: ::c_int = 123;
pub const EMEDIUMTYPE: ::c_int = 124;
pub const ECANCELED: ::c_int = 125;
pub const ENOKEY: ::c_int = 126;
pub const EKEYEXPIRED: ::c_int = 127;
pub const EKEYREVOKED: ::c_int = 128;
pub const EKEYREJECTED: ::c_int = 129;
pub const EOWNERDEAD: ::c_int = 130;
pub const ENOTRECOVERABLE: ::c_int = 131;
pub const ERFKILL: ::c_int = 132;
pub const EHWPOISON: ::c_int = 133;
pub const EIEIO: ::c_int = 4095;

// abi-bits/fcntl.h
pub const O_PATH: ::c_int = 0o10000000;
pub const O_ACCMODE: ::c_int = 0o3 | O_PATH;
pub const O_CREAT: ::c_int = 0o100;
pub const O_EXCL: ::c_int = 0o200;
pub const O_NOCTTY: ::c_int = 0o400;
pub const O_TRUNC: ::c_int = 0o1000;
pub const O_APPEND: ::c_int = 0o2000;
pub const O_NONBLOCK: ::c_int = 0o4000;
pub const O_DSYNC: ::c_int = 0o10000;
pub const O_ASYNC: ::c_int = 0o20000;
pub const O_DIRECT: ::c_int = 0o40000;
pub const O_DIRECTORY: ::c_int = 0o200000;
pub const O_NOFOLLOW: ::c_int = 0o400000;
pub const O_CLOEXEC: ::c_int = 0o2000000;
pub const O_SYNC: ::c_int = 0o4010000;
pub const O_RSYNC: ::c_int = 0o4010000;
pub const O_LARGEFILE: ::c_int = 0o100000;
pub const O_NOATIME: ::c_int = 0o1000000;
pub const O_TMPFILE: ::c_int = 0o20000000;
pub const O_EXEC: ::c_int = O_PATH;
pub const O_SEARCH: ::c_int = O_PATH;
pub const F_SETOWN: ::c_int = 8;
pub const F_GETOWN: ::c_int = 9;
pub const F_SETSIG: ::c_int = 10;
pub const F_GETSIG: ::c_int = 11;
pub const F_GETLK: ::c_int = 5;
pub const F_SETLK: ::c_int = 6;
pub const F_SETLK64: ::c_int = F_SETLK;
pub const F_SETLKW: ::c_int = 7;
pub const F_SETLKW64: ::c_int = F_SETLKW;
pub const F_SETOWN_EX: ::c_int = 15;
pub const F_GETOWN_EX: ::c_int = 16;
pub const F_GETOWNER_UIDS: ::c_int = 17;
pub const F_RDLCK: ::c_int = 0;
pub const F_WRLCK: ::c_int = 1;
pub const F_UNLCK: ::c_int = 2;
pub const AT_EACCESS: ::c_int = 0x200;
pub const AT_STATX_SYNC_AS_STAT: ::c_int = 0x0000;
pub const AT_STATX_FORCE_SYNC: ::c_int = 0x2000;
pub const AT_STATX_DONT_SYNC: ::c_int = 0x4000;
pub const AT_STATX_SYNC_TYPE: ::c_int = 0x6000;
pub const POSIX_FADV_DONTNEED: ::c_int = 4;
pub const POSIX_FADV_NOREUSE: ::c_int = 5;
s! {
    pub struct f_owner_ex {
        pub r#type: ::c_int,
        pub pid: ::pid_t,
    }
}

// abi-bits/fsblkcnt_t.h
pub type fsblkcnt_t = u64;

// abi-bits/fsfilcnt_t.h
pub type fsfilcnt_t = u64;

// abi-bits/gid_t.h

// abi-bits/in.h
pub const SOCK_STREAM: ::c_int = 1;
pub const SOCK_DGRAM: ::c_int = 2;
pub const SOCK_SEQPACKET: ::c_int = 5;
pub const SOCK_DCCP: ::c_int = 6;
pub const SOCK_PACKET: ::c_int = 10;
pub const SOCK_NONBLOCK: ::c_int = 0o4000;
pub const PF_LOCAL: ::c_int = 1;
pub const PF_FILE: ::c_int = PF_LOCAL;
pub const PF_IB: ::c_int = 27;
pub const PF_MPLS: ::c_int = 28;
pub const PF_NFC: ::c_int = 39;
pub const PF_VSOCK: ::c_int = 40;
pub const PF_KCM: ::c_int = 41;
pub const PF_QIPCRTR: ::c_int = 42;
pub const PF_SMC: ::c_int = 43;
pub const PF_XDP: ::c_int = 44;
pub const PF_MAX: ::c_int = 45;
pub const AF_LOCAL: ::c_int = PF_LOCAL;
pub const AF_FILE: ::c_int = AF_LOCAL;
pub const AF_IB: ::c_int = PF_IB;
pub const AF_MPLS: ::c_int = PF_MPLS;
pub const AF_NFC: ::c_int = PF_NFC;
pub const AF_VSOCK: ::c_int = PF_VSOCK;
pub const AF_KCM: ::c_int = PF_KCM;
pub const AF_QIPCRTR: ::c_int = PF_QIPCRTR;
pub const AF_SMC: ::c_int = PF_SMC;
pub const AF_XDP: ::c_int = PF_XDP;
pub const AF_MAX: ::c_int = PF_MAX;
pub const SO_REUSEADDR: ::c_int = 2;
pub const SO_TYPE: ::c_int = 3;
pub const SO_ERROR: ::c_int = 4;
pub const SO_DONTROUTE: ::c_int = 5;
pub const SO_BROADCAST: ::c_int = 6;
pub const SO_SNDBUF: ::c_int = 7;
pub const SO_RCVBUF: ::c_int = 8;
pub const SO_KEEPALIVE: ::c_int = 9;
pub const SO_OOBINLINE: ::c_int = 10;
pub const SO_NO_CHECK: ::c_int = 11;
pub const SO_PRIORITY: ::c_int = 12;
pub const SO_LINGER: ::c_int = 13;
pub const SO_BSDCOMPAT: ::c_int = 14;
pub const SO_REUSEPORT: ::c_int = 15;
pub const SO_PASSCRED: ::c_int = 16;
pub const SO_PEERCRED: ::c_int = 17;
pub const SO_RCVLOWAT: ::c_int = 18;
pub const SO_SNDLOWAT: ::c_int = 19;
pub const SO_ACCEPTCONN: ::c_int = 30;
pub const SO_PEERSEC: ::c_int = 31;
pub const SO_SNDBUFFORCE: ::c_int = 32;
pub const SO_RCVBUFFORCE: ::c_int = 33;
pub const SO_PROTOCOL: ::c_int = 38;
pub const SO_DOMAIN: ::c_int = 39;
pub const SO_RCVTIMEO: ::c_int = 20;
pub const SO_SNDTIMEO: ::c_int = 21;
pub const SO_TIMESTAMP: ::c_int = 29;
pub const SO_TIMESTAMPNS: ::c_int = 35;
pub const SO_TIMESTAMPING: ::c_int = 37;
pub const SO_SECURITY_AUTHENTICATION: ::c_int = 22;
pub const SO_SECURITY_ENCRYPTION_TRANSPORT: ::c_int = 23;
pub const SO_SECURITY_ENCRYPTION_NETWORK: ::c_int = 24;
pub const SO_BINDTODEVICE: ::c_int = 25;
pub const SO_ATTACH_FILTER: ::c_int = 26;
pub const SO_DETACH_FILTER: ::c_int = 27;
pub const SO_GET_FILTER: ::c_int = SO_ATTACH_FILTER;
pub const SO_PEERNAME: ::c_int = 28;
pub const SO_PASSSEC: ::c_int = 34;
pub const SCM_TIMESTAMPNS: ::c_int = SO_TIMESTAMPNS;
pub const SO_MARK: ::c_int = 36;
pub const SCM_TIMESTAMPING: ::c_int = SO_TIMESTAMPING;
pub const SO_RXQ_OVFL: ::c_int = 40;
pub const SO_WIFI_STATUS: ::c_int = 41;
pub const SCM_WIFI_STATUS: ::c_int = SO_WIFI_STATUS;
pub const SO_PEEK_OFF: ::c_int = 42;
pub const SO_NOFCS: ::c_int = 43;
pub const SO_LOCK_FILTER: ::c_int = 44;
pub const SO_SELECT_ERR_QUEUE: ::c_int = 45;
pub const SO_BUSY_POLL: ::c_int = 46;
pub const SO_MAX_PACING_RATE: ::c_int = 47;
pub const SO_BPF_EXTENSIONS: ::c_int = 48;
pub const SO_INCOMING_CPU: ::c_int = 49;
pub const SO_ATTACH_BPF: ::c_int = 50;
pub const SO_DETACH_BPF: ::c_int = SO_DETACH_FILTER;
pub const SO_ATTACH_REUSEPORT_CBPF: ::c_int = 51;
pub const SO_ATTACH_REUSEPORT_EBPF: ::c_int = 52;
pub const SO_CNX_ADVICE: ::c_int = 53;
pub const SCM_TIMESTAMPING_OPT_STATS: ::c_int = 54;
pub const SO_MEMINFO: ::c_int = 55;
pub const SO_INCOMING_NAPI_ID: ::c_int = 56;
pub const SO_COOKIE: ::c_int = 57;
pub const SCM_TIMESTAMPING_PKTINFO: ::c_int = 58;
pub const SO_PEERGROUPS: ::c_int = 59;
pub const SO_ZEROCOPY: ::c_int = 60;
pub const SO_TXTIME: ::c_int = 61;
pub const SCM_TXTIME: ::c_int = SO_TXTIME;
pub const SO_BINDTOIFINDEX: ::c_int = 62;
pub const SO_DETACH_REUSEPORT_BPF: ::c_int = 68;
pub const SOL_SOCKET: ::c_int = 1;
pub const SOL_RXRPC: ::c_int = 272;
pub const SOL_PPPOL2TP: ::c_int = 273;
pub const SOL_PNPIPE: ::c_int = 275;
pub const SOL_RDS: ::c_int = 276;
pub const SOL_IUCV: ::c_int = 277;
pub const SOL_CAIF: ::c_int = 278;
pub const SOL_NFC: ::c_int = 280;
pub const SOL_KCM: ::c_int = 281;
pub const SOL_TLS: ::c_int = 282;
pub const SOL_XDP: ::c_int = 283;
pub const SOMAXCONN: ::c_int = 128;
pub const MSG_PROXY: ::c_int = 0x0010;
pub const MSG_BATCH: ::c_int = 0x40000;
pub const MSG_ZEROCOPY: ::c_int = 0x4000000;
pub const INET_ADDRSTRLEN: ::c_int = 16;
pub const INET6_ADDRSTRLEN: ::c_int = 46;
pub const IPPORT_RESERVED: ::c_int = 1024;
pub const IPPROTO_MAX: ::c_int = 256;
pub const IPV6_JOIN_GROUP: ::c_int = 20;
pub const IPV6_LEAVE_GROUP: ::c_int = 21;
pub type socklen_t = ::c_uint;
s! {
    pub struct iovec {
        pub iov_base: *mut ::c_void,
        pub iov_len: usize,
    }
}
s! {
    pub struct msghdr {
        pub msg_name: *mut ::c_void,
        pub msg_namelen: ::socklen_t,
        pub msg_iov: *mut ::iovec,
        pub msg_iovlen: ::size_t,
        pub msg_control: *mut ::c_void,
        pub msg_controllen: ::size_t,
        pub msg_flags: ::c_int,
    }
    pub struct cmsghdr {
        pub cmsg_len: ::size_t,
        pub cmsg_level: ::c_int,
        pub cmsg_type: ::c_int,
    }
    pub struct ipv6_mreq {
        pub ipv6mr_multiaddr: ::in6_addr,
        pub ipv6mr_interface: ::c_uint,
    }
    pub struct in6_pktinfo {
        pub ipi6_addr: ::in6_addr,
        pub ipi6_ifindex: u32,
    }
    pub struct group_req {
        pub gr_interface: u32,
        pub gr_group: ::sockaddr_storage,
    }
    pub struct group_source_req {
        pub gsr_interface: u32,
        pub gsr_group: ::sockaddr_storage,
        pub gsr_source: ::sockaddr_storage,
    }
}

// abi-bits/ino_t.h
pub type ino_t = u64;

// abi-bits/inotify.h
pub const IN_CLOEXEC: ::c_int = O_CLOEXEC;
pub const IN_NONBLOCK: ::c_int = O_NONBLOCK;

// abi-bits/ioctls.h
pub const TIOCEXCL: ::c_int = 0x540C;
pub const TIOCNXCL: ::c_int = 0x540D;
pub const SIOCPROTOPRIVATE: ::c_int = 0x89E0;
pub const SIOCGIFNAME: ::c_int = 0x8910;
pub const SIOCGIFCONF: ::c_int = 0x8912;
pub const SIOCGIFFLAGS: ::c_int = 0x8913;
pub const SIOCSIFFLAGS: ::c_int = 0x8914;
pub const SIOCGIFADDR: ::c_int = 0x8915;
pub const SIOCGIFINDEX: ::c_int = 0x8933;
pub const SIOCATMARK: ::c_int = 0x8905;
pub const SIOCGIFHWADDR: ::c_int = 0x8927;
pub const SIOCGIFBRDADDR: ::c_int = 0x8919;
pub const SIOCGIFNETMASK: ::c_int = 0x891B;

// abi-bits/mode_t.h
pub type mode_t = ::c_uint;

// abi-bits/mqueue.h
s! {
    pub struct mq_attr {
        pub mq_flags: ::c_long,
        pub mq_maxmsg: ::c_long,
        pub mq_msgsize: ::c_long,
        pub mq_curmsgs: ::c_long,
        pub __pad: [::c_long; 4],
    }
}

// abi-bits/msg.h
pub const IPC_CREAT: ::c_int = 0o1000;
pub const IPC_EXCL: ::c_int = 0o2000;
pub const IPC_NOWAIT: ::c_int = 0o4000;
pub const IPC_RMID: ::c_int = 0;
pub const IPC_SET: ::c_int = 1;
pub const IPC_STAT: ::c_int = 2;
pub const IPC_INFO: ::c_int = 3;
pub const IPC_64: ::c_int = 0;
s! {
    pub struct ipc64_perm {
        pub __ipc_perm_key: ::key_t,
        pub uid: ::uid_t,
        pub gid: ::gid_t,
        pub cuid: ::uid_t,
        pub cgid: ::gid_t,
        pub mode: ::mode_t,
        pub __ipc_perm_seq: ::c_short,
        pub __pad: ::c_short,
        pub __unused: [::c_ulong; 2],
    }
}
extern "C" {
    pub fn ftok(__path: *const ::c_char, __proj_id: ::c_int) -> ::key_t;
}
pub type time_t = ::c_long;
pub type msglen_t = ::c_ulong;
pub type msgqnum_t = ::c_ulong;
s! {
    pub struct msqid64_ds {
        pub msg_perm: ::ipc64_perm,
        pub msg_stime: ::time_t,
        pub msg_rtime: ::time_t,
        pub msg_ctime: ::time_t,
        pub msg_cbytes: ::c_ulong,
        pub msg_qnum: ::msgqnum_t,
        pub msg_qbytes: ::msglen_t,
        pub msg_lspid: ::pid_t,
        pub msg_lrpid: ::pid_t,
        pub __unused: [::c_ulong; 2],
    }
}

// abi-bits/nlink_t.h
pub type nlink_t = ::c_ulong;

// abi-bits/packet.h
pub const PACKET_HOST: ::c_int = 0;

// abi-bits/pid_t.h

// abi-bits/poll.h
pub const POLLWRNORM: ::c_short = 0x0100;
pub const POLLWRBAND: ::c_short = 0x0200;

// abi-bits/ptrace.h
pub const PTRACE_PEEKTEXT: ::c_int = 1;
pub const PTRACE_PEEKDATA: ::c_int = 2;
pub const PTRACE_PEEKUSER: ::c_int = 3;
pub const PTRACE_POKETEXT: ::c_int = 4;
pub const PTRACE_POKEDATA: ::c_int = 5;
pub const PTRACE_POKEUSER: ::c_int = 6;
pub const PTRACE_CONT: ::c_int = 7;
pub const PTRACE_KILL: ::c_int = 8;
pub const PTRACE_SINGLESTEP: ::c_int = 9;
pub const PTRACE_GETREGS: ::c_int = 12;
pub const PTRACE_SETREGS: ::c_int = 13;
pub const PTRACE_GETFPREGS: ::c_int = 14;
pub const PTRACE_SETFPREGS: ::c_int = 15;
pub const PTRACE_ATTACH: ::c_int = 16;
pub const PTRACE_DETACH: ::c_int = 17;
pub const PTRACE_GETFPXREGS: ::c_int = 18;
pub const PTRACE_SETFPXREGS: ::c_int = 19;
pub const PTRACE_SYSCALL: ::c_int = 24;
pub const PTRACE_SETOPTIONS: ::c_int = 0x4200;
pub const PTRACE_GETEVENTMSG: ::c_int = 0x4201;
pub const PTRACE_GETSIGINFO: ::c_int = 0x4202;
pub const PTRACE_SETSIGINFO: ::c_int = 0x4203;
pub const PTRACE_GETREGSET: ::c_int = 0x4204;
pub const PTRACE_SETREGSET: ::c_int = 0x4205;
pub const PTRACE_SEIZE: ::c_int = 0x4206;
pub const PTRACE_INTERRUPT: ::c_int = 0x4207;
pub const PTRACE_LISTEN: ::c_int = 0x4208;
pub const PTRACE_PEEKSIGINFO: ::c_int = 0x4209;
pub const PTRACE_GETSIGMASK: ::c_int = 0x420A;
pub const PTRACE_SETSIGMASK: ::c_int = 0x420B;
pub const PTRACE_SECCOMP_GET_FILTER: ::c_int = 0x420C;
pub const PTRACE_EVENT_STOP: ::c_int = 128;
pub const PTRACE_PEEKSIGINFO_SHARED: ::c_int = 1;

// abi-bits/reboot.h
pub const RB_AUTOBOOT: ::c_int = 0x01234567;
pub const RB_HALT_SYSTEM: ::c_int = 0xcdef0123;
pub const RB_ENABLE_CAD: ::c_int = 0x89abcdef;
pub const RB_DISABLE_CAD: ::c_int = 0;
pub const RB_POWER_OFF: ::c_int = 0x4321fedc;
pub const RB_SW_SUSPEND: ::c_int = 0xd000fce2;
pub const RB_KEXEC: ::c_int = 0x45584543;

// abi-bits/resource.h
pub const RUSAGE_CHILDREN: ::c_int = 1;
pub const RLIMIT_CPU: ::c_int = 0;
pub const RLIMIT_FSIZE: ::c_int = 1;
pub const RLIMIT_DATA: ::c_int = 2;
pub const RLIMIT_STACK: ::c_int = 3;
pub const RLIMIT_CORE: ::c_int = 4;
pub const RLIMIT_RSS: ::c_int = 5;
pub const RLIMIT_NPROC: ::c_int = 6;
pub const RLIMIT_NOFILE: ::c_int = 7;
pub const RLIMIT_MEMLOCK: ::c_int = 8;
pub const RLIMIT_AS: ::c_int = 9;
pub const RLIMIT_LOCKS: ::c_int = 10;
pub const RLIMIT_SIGPENDING: ::c_int = 11;
pub const RLIMIT_MSGQUEUE: ::c_int = 12;
pub const RLIMIT_NICE: ::c_int = 13;
pub const RLIMIT_RTPRIO: ::c_int = 14;
pub const RLIMIT_RTTIME: ::c_int = 15;
pub const RLIMIT_NLIMITS: ::c_int = 16;
pub type suseconds_t = ::c_long;
s! {
    pub struct timeval {
        pub tv_sec: ::time_t,
        pub tv_usec: ::suseconds_t,
    }
    pub struct rusage {
        pub ru_utime: ::timeval,
        pub ru_stime: ::timeval,
        pub ru_maxrss: ::c_long,
        pub ru_ixrss: ::c_long,
        pub ru_idrss: ::c_long,
        pub ru_isrss: ::c_long,
        pub ru_minflt: ::c_long,
        pub ru_majflt: ::c_long,
        pub ru_nswap: ::c_long,
        pub ru_inblock: ::c_long,
        pub ru_oublock: ::c_long,
        pub ru_msgsnd: ::c_long,
        pub ru_msgrcv: ::c_long,
        pub ru_nsignals: ::c_long,
        pub ru_nvcsw: ::c_long,
        pub ru_nivcsw: ::c_long,
    }
}

// abi-bits/seek-whence.h
pub const SEEK_DATA: ::c_int = 3;
pub const SEEK_HOLE: ::c_int = 4;

// abi-bits/shm.h
pub const _POSIX_VERSION: ::c_long = 200809;
pub const _XOPEN_VERSION: ::c_int = 700;
pub const _POSIX_JOB_CONTROL: ::c_int = 1;
pub const _POSIX_SAVED_IDS: ::c_int = 1;
pub const _POSIX_SHELL: ::c_int = 1;
pub const _POSIX_MONOTONIC_CLOCK: ::c_int = 0;
pub const _CS_PATH: ::c_int = 0;
pub const _CS_POSIX_V6_WIDTH_RESTRICTED_ENVS: ::c_int = 1;
pub const _CS_GNU_LIBC_VERSION: ::c_int = 2;
pub const _CS_GNU_LIBPTHREAD_VERSION: ::c_int = 3;
pub const _CS_POSIX_V5_WIDTH_RESTRICTED_ENVS: ::c_int = 4;
pub const _CS_POSIX_V7_WIDTH_RESTRICTED_ENVS: ::c_int = 5;
pub const _CS_POSIX_V6_ILP32_OFF32_CFLAGS: ::c_int = 1116;
pub const _CS_POSIX_V6_ILP32_OFF32_LDFLAGS: ::c_int = 1117;
pub const _CS_POSIX_V6_ILP32_OFF32_LIBS: ::c_int = 1118;
pub const _CS_POSIX_V6_ILP32_OFF32_LINTFLAGS: ::c_int = 1119;
pub const _CS_POSIX_V6_ILP32_OFFBIG_CFLAGS: ::c_int = 1120;
pub const _CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS: ::c_int = 1121;
pub const _CS_POSIX_V6_ILP32_OFFBIG_LIBS: ::c_int = 1122;
pub const _CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS: ::c_int = 1123;
pub const _CS_POSIX_V6_LP64_OFF64_CFLAGS: ::c_int = 1124;
pub const _CS_POSIX_V6_LP64_OFF64_LDFLAGS: ::c_int = 1125;
pub const _CS_POSIX_V6_LP64_OFF64_LIBS: ::c_int = 1126;
pub const _CS_POSIX_V6_LP64_OFF64_LINTFLAGS: ::c_int = 1127;
pub const _CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS: ::c_int = 1128;
pub const _CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS: ::c_int = 1129;
pub const _CS_POSIX_V6_LPBIG_OFFBIG_LIBS: ::c_int = 1130;
pub const _CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS: ::c_int = 1131;
pub const _CS_POSIX_V7_ILP32_OFF32_CFLAGS: ::c_int = 1132;
pub const _CS_POSIX_V7_ILP32_OFF32_LDFLAGS: ::c_int = 1133;
pub const _CS_POSIX_V7_ILP32_OFF32_LIBS: ::c_int = 1134;
pub const _CS_POSIX_V7_ILP32_OFF32_LINTFLAGS: ::c_int = 1135;
pub const _CS_POSIX_V7_ILP32_OFFBIG_CFLAGS: ::c_int = 1136;
pub const _CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS: ::c_int = 1137;
pub const _CS_POSIX_V7_ILP32_OFFBIG_LIBS: ::c_int = 1138;
pub const _CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS: ::c_int = 1139;
pub const _CS_POSIX_V7_LP64_OFF64_CFLAGS: ::c_int = 1140;
pub const _CS_POSIX_V7_LP64_OFF64_LDFLAGS: ::c_int = 1141;
pub const _CS_POSIX_V7_LP64_OFF64_LIBS: ::c_int = 1142;
pub const _CS_POSIX_V7_LP64_OFF64_LINTFLAGS: ::c_int = 1143;
pub const _CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS: ::c_int = 1144;
pub const _CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS: ::c_int = 1145;
pub const _CS_POSIX_V7_LPBIG_OFFBIG_LIBS: ::c_int = 1146;
pub const _CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS: ::c_int = 1147;
pub const _CS_V6_ENV: ::c_int = 1148;
pub const _CS_V7_ENV: ::c_int = 1149;
pub const F_LOCK: ::c_int = 1;
pub const F_TEST: ::c_int = 2;
pub const F_TLOCK: ::c_int = 3;
pub const F_ULOCK: ::c_int = 4;
pub const _PC_LINK_MAX: ::c_int = 0;
pub const _PC_MAX_CANON: ::c_int = 1;
pub const _PC_MAX_INPUT: ::c_int = 2;
pub const _PC_NAME_MAX: ::c_int = 3;
pub const _PC_PATH_MAX: ::c_int = 4;
pub const _PC_PIPE_BUF: ::c_int = 5;
pub const _PC_CHOWN_RESTRICTED: ::c_int = 6;
pub const _PC_NO_TRUNC: ::c_int = 7;
pub const _PC_VDISABLE: ::c_int = 8;
pub const _PC_FILESIZEBITS: ::c_int = 9;
pub const _PC_SYMLINK_MAX: ::c_int = 10;
pub const _SC_ARG_MAX: ::c_int = 0;
pub const _SC_CHILD_MAX: ::c_int = 1;
pub const _SC_CLK_TCK: ::c_int = 2;
pub const _SC_NGROUPS_MAX: ::c_int = 3;
pub const _SC_OPEN_MAX: ::c_int = 4;
pub const _SC_STREAM_MAX: ::c_int = 5;
pub const _SC_TZNAME_MAX: ::c_int = 6;
pub const _SC_JOB_CONTROL: ::c_int = 7;
pub const _SC_SAVED_IDS: ::c_int = 8;
pub const _SC_REALTIME_SIGNALS: ::c_int = 9;
pub const _SC_PRIORITY_SCHEDULING: ::c_int = 10;
pub const _SC_TIMERS: ::c_int = 11;
pub const _SC_ASYNCHRONOUS_IO: ::c_int = 12;
pub const _SC_PRIORITIZED_IO: ::c_int = 13;
pub const _SC_SYNCHRONIZED_IO: ::c_int = 14;
pub const _SC_FSYNC: ::c_int = 15;
pub const _SC_MAPPED_FILES: ::c_int = 16;
pub const _SC_MEMLOCK: ::c_int = 17;
pub const _SC_MEMLOCK_RANGE: ::c_int = 18;
pub const _SC_MEMORY_PROTECTION: ::c_int = 19;
pub const _SC_MESSAGE_PASSING: ::c_int = 20;
pub const _SC_SEMAPHORES: ::c_int = 21;
pub const _SC_SHARED_MEMORY_OBJECTS: ::c_int = 22;
pub const _SC_AIO_LISTIO_MAX: ::c_int = 23;
pub const _SC_AIO_MAX: ::c_int = 24;
pub const _SC_AIO_PRIO_DELTA_MAX: ::c_int = 25;
pub const _SC_DELAYTIMER_MAX: ::c_int = 26;
pub const _SC_MQ_OPEN_MAX: ::c_int = 27;
pub const _SC_MQ_PRIO_MAX: ::c_int = 28;
pub const _SC_VERSION: ::c_int = 29;
pub const _SC_PAGE_SIZE: ::c_int = 30;
pub const _SC_PAGESIZE: ::c_int = _SC_PAGE_SIZE;
pub const _SC_RTSIG_MAX: ::c_int = 31;
pub const _SC_SEM_NSEMS_MAX: ::c_int = 32;
pub const _SC_SEM_VALUE_MAX: ::c_int = 33;
pub const _SC_SIGQUEUE_MAX: ::c_int = 34;
pub const _SC_TIMER_MAX: ::c_int = 35;
pub const _SC_BC_BASE_MAX: ::c_int = 36;
pub const _SC_BC_DIM_MAX: ::c_int = 37;
pub const _SC_BC_SCALE_MAX: ::c_int = 38;
pub const _SC_BC_STRING_MAX: ::c_int = 39;
pub const _SC_COLL_WEIGHTS_MAX: ::c_int = 40;
pub const _SC_EXPR_NEST_MAX: ::c_int = 42;
pub const _SC_LINE_MAX: ::c_int = 43;
pub const _SC_RE_DUP_MAX: ::c_int = 44;
pub const _SC_2_VERSION: ::c_int = 46;
pub const _SC_2_C_BIND: ::c_int = 47;
pub const _SC_2_C_DEV: ::c_int = 48;
pub const _SC_2_FORT_DEV: ::c_int = 49;
pub const _SC_2_FORT_RUN: ::c_int = 50;
pub const _SC_2_SW_DEV: ::c_int = 51;
pub const _SC_2_LOCALEDEF: ::c_int = 52;
pub const _SC_IOV_MAX: ::c_int = 60;
pub const _SC_UIO_MAXIOV: ::c_int = _SC_IOV_MAX;
pub const _SC_THREADS: ::c_int = 67;
pub const _SC_THREAD_SAFE_FUNCTIONS: ::c_int = 68;
pub const _SC_GETGR_R_SIZE_MAX: ::c_int = 69;
pub const _SC_GETPW_R_SIZE_MAX: ::c_int = 70;
pub const _SC_LOGIN_NAME_MAX: ::c_int = 71;
pub const _SC_TTY_NAME_MAX: ::c_int = 72;
pub const _SC_THREAD_DESTRUCTOR_ITERATIONS: ::c_int = 73;
pub const _SC_THREAD_KEYS_MAX: ::c_int = 74;
pub const _SC_THREAD_STACK_MIN: ::c_int = 75;
pub const _SC_THREAD_THREADS_MAX: ::c_int = 76;
pub const _SC_THREAD_ATTR_STACKADDR: ::c_int = 77;
pub const _SC_THREAD_ATTR_STACKSIZE: ::c_int = 78;
pub const _SC_THREAD_PRIORITY_SCHEDULING: ::c_int = 79;
pub const _SC_THREAD_PRIO_INHERIT: ::c_int = 80;
pub const _SC_THREAD_PRIO_PROTECT: ::c_int = 81;
pub const _SC_THREAD_PROCESS_SHARED: ::c_int = 82;
pub const _SC_NPROCESSORS_CONF: ::c_int = 83;
pub const _SC_NPROCESSORS_ONLN: ::c_int = 84;
pub const _SC_PHYS_PAGES: ::c_int = 85;
pub const _SC_AVPHYS_PAGES: ::c_int = 86;
pub const _SC_ATEXIT_MAX: ::c_int = 87;
pub const _SC_PASS_MAX: ::c_int = 88;
pub const _SC_XOPEN_VERSION: ::c_int = 89;
pub const _SC_XOPEN_XCU_VERSION: ::c_int = 90;
pub const _SC_XOPEN_UNIX: ::c_int = 91;
pub const _SC_XOPEN_CRYPT: ::c_int = 92;
pub const _SC_XOPEN_ENH_I18N: ::c_int = 93;
pub const _SC_XOPEN_SHM: ::c_int = 94;
pub const _SC_2_CHAR_TERM: ::c_int = 95;
pub const _SC_2_UPE: ::c_int = 97;
pub const _SC_XOPEN_XPG2: ::c_int = 98;
pub const _SC_XOPEN_XPG3: ::c_int = 99;
pub const _SC_XOPEN_XPG4: ::c_int = 100;
pub const _SC_NZERO: ::c_int = 109;
pub const _SC_XBS5_ILP32_OFF32: ::c_int = 125;
pub const _SC_XBS5_ILP32_OFFBIG: ::c_int = 126;
pub const _SC_XBS5_LP64_OFF64: ::c_int = 127;
pub const _SC_XBS5_LPBIG_OFFBIG: ::c_int = 128;
pub const _SC_XOPEN_LEGACY: ::c_int = 129;
pub const _SC_XOPEN_REALTIME: ::c_int = 130;
pub const _SC_XOPEN_REALTIME_THREADS: ::c_int = 131;
pub const _SC_ADVISORY_INFO: ::c_int = 132;
pub const _SC_BARRIERS: ::c_int = 133;
pub const _SC_CLOCK_SELECTION: ::c_int = 137;
pub const _SC_CPUTIME: ::c_int = 138;
pub const _SC_THREAD_CPUTIME: ::c_int = 139;
pub const _SC_MONOTONIC_CLOCK: ::c_int = 149;
pub const _SC_READER_WRITER_LOCKS: ::c_int = 153;
pub const _SC_SPIN_LOCKS: ::c_int = 154;
pub const _SC_REGEXP: ::c_int = 155;
pub const _SC_SHELL: ::c_int = 157;
pub const _SC_SPAWN: ::c_int = 159;
pub const _SC_SPORADIC_SERVER: ::c_int = 160;
pub const _SC_THREAD_SPORADIC_SERVER: ::c_int = 161;
pub const _SC_TIMEOUTS: ::c_int = 164;
pub const _SC_TYPED_MEMORY_OBJECTS: ::c_int = 165;
pub const _SC_2_PBS: ::c_int = 168;
pub const _SC_2_PBS_ACCOUNTING: ::c_int = 169;
pub const _SC_2_PBS_LOCATE: ::c_int = 170;
pub const _SC_2_PBS_MESSAGE: ::c_int = 171;
pub const _SC_2_PBS_TRACK: ::c_int = 172;
pub const _SC_SYMLOOP_MAX: ::c_int = 173;
pub const _SC_STREAMS: ::c_int = 174;
pub const _SC_2_PBS_CHECKPOINT: ::c_int = 175;
pub const _SC_V6_ILP32_OFF32: ::c_int = 176;
pub const _SC_V6_ILP32_OFFBIG: ::c_int = 177;
pub const _SC_V6_LP64_OFF64: ::c_int = 178;
pub const _SC_V6_LPBIG_OFFBIG: ::c_int = 179;
pub const _SC_HOST_NAME_MAX: ::c_int = 180;
pub const _SC_TRACE: ::c_int = 181;
pub const _SC_TRACE_EVENT_FILTER: ::c_int = 182;
pub const _SC_TRACE_INHERIT: ::c_int = 183;
pub const _SC_TRACE_LOG: ::c_int = 184;
pub const L_ctermid: ::c_int = 20;
pub type off_t = ::c_long;
pub type off64_t = ::c_long;
extern "C" {
    pub fn confstr(__name: ::c_int, __buf: *mut ::c_char, __size: ::size_t) -> ::ssize_t;
    pub fn ctermid(__s: *mut ::c_char) -> *mut ::c_char;
    pub fn endusershell();
    pub fn faccessat(
        __fd: ::c_int,
        __path: *const ::c_char,
        __mode: ::c_int,
        __flags: ::c_int,
    ) -> ::c_int;
    pub fn ftruncate64(__fd: ::c_int, __size: ::off64_t) -> ::c_int;
    pub fn gethostid() -> ::c_long;
    pub fn sethostname(__buffer: *const ::c_char, __max_length: ::size_t) -> ::c_int;
    pub fn getlogin_r(__buffer: *mut ::c_char, __size: ::size_t) -> ::c_int;
    pub fn getpass(__prompt: *const ::c_char) -> *mut ::c_char;
    pub fn getusershell() -> *mut ::c_char;
    pub fn pread64(
        __fd: ::c_int,
        __buf: *mut ::c_void,
        __size: ::size_t,
        __offset: ::off_t,
    ) -> ::ssize_t;
    pub fn pwrite64(
        __fd: ::c_int,
        __buf: *const ::c_void,
        __size: ::size_t,
        __offset: ::off_t,
    ) -> ::ssize_t;
    pub fn setpgrp() -> ::pid_t;
    pub fn setusershell();
    pub fn swab(__from: *const ::c_void, __to: *mut ::c_void, __size: ::ssize_t);
    pub fn sync();
    pub fn truncate64(__path: *const ::c_char, __size: ::off64_t) -> ::c_int;
}
pub type useconds_t = u64;
extern "C" {
    pub fn getpagesize() -> ::c_int;
    pub fn get_current_dir_name() -> *mut ::c_char;
    pub fn daemon(__nochdir: ::c_int, __noclose: ::c_int) -> ::c_int;
    pub fn gettid() -> ::pid_t;
    pub fn getentropy(__buffer: *mut ::c_void, __size: ::size_t) -> ::c_int;
    pub fn getdomainname(__name: *mut ::c_char, __len: ::size_t) -> ::c_int;
    pub fn setdomainname(__name: *const ::c_char, __len: ::size_t) -> ::c_int;
}
s! {
    pub struct shm_info {
        pub used_ids: ::c_int,
        pub shm_tot: ::c_ulong,
        pub shm_rss: ::c_ulong,
        pub shm_swp: ::c_ulong,
        pub swap_attempts: ::c_ulong,
        pub swap_successes: ::c_ulong,
    }
}

// abi-bits/signal.h
pub const SIGBUS: ::c_int = 7;
pub const SIGUSR1: ::c_int = 10;
pub const SIGUSR2: ::c_int = 12;
pub const SIGSTKFLT: ::c_int = 16;
pub const SIGCHLD: ::c_int = 17;
pub const SIGCONT: ::c_int = 18;
pub const SIGSTOP: ::c_int = 19;
pub const SIGTSTP: ::c_int = 20;
pub const SIGTTIN: ::c_int = 21;
pub const SIGTTOU: ::c_int = 22;
pub const SIGURG: ::c_int = 23;
pub const SIGXCPU: ::c_int = 24;
pub const SIGXFSZ: ::c_int = 25;
pub const SIGVTALRM: ::c_int = 26;
pub const SIGPROF: ::c_int = 27;
pub const SIGWINCH: ::c_int = 28;
pub const SIGIO: ::c_int = 29;
pub const SIGPOLL: ::c_int = SIGIO;
pub const SIGPWR: ::c_int = 30;
pub const SIGSYS: ::c_int = 31;
pub const SIGCANCEL: ::c_int = 34;
pub const ILL_ILLOPC: ::c_int = 1;
pub const ILL_ILLOPN: ::c_int = 2;
pub const ILL_ILLADR: ::c_int = 3;
pub const ILL_ILLTRP: ::c_int = 4;
pub const ILL_PRVOPC: ::c_int = 5;
pub const ILL_PRVREG: ::c_int = 6;
pub const ILL_COPROC: ::c_int = 7;
pub const ILL_BADSTK: ::c_int = 8;
pub const ILL_BADIADDR: ::c_int = 9;
pub const SEGV_MAPERR: ::c_int = 1;
pub const SEGV_ACCERR: ::c_int = 2;
pub const SIGUNUSED: ::c_int = SIGSYS;
pub const SIG_BLOCK: ::c_int = 1;
pub const SIG_UNBLOCK: ::c_int = 2;
pub const SIG_SETMASK: ::c_int = 3;
pub const SA_NOCLDSTOP: ::c_ulong = 1 << 0;
pub const SA_ONSTACK: ::c_ulong = 1 << 1;
pub const SA_RESETHAND: ::c_ulong = 1 << 2;
pub const SA_RESTART: ::c_ulong = 1 << 3;
pub const SA_SIGINFO: ::c_ulong = 1 << 4;
pub const SA_NOCLDWAIT: ::c_ulong = 1 << 5;
pub const SA_NODEFER: ::c_ulong = 1 << 6;
pub const MINSIGSTKSZ: ::c_int = 2048;
pub const SIGSTKSZ: ::c_int = 8192;
pub const SI_ASYNCNL: ::c_int = 60;
pub const SI_TKILL: ::c_int = 6;
pub const SI_SIGIO: ::c_int = 5;
pub const SI_ASYNCIO: ::c_int = 4;
pub const SI_MESGQ: ::c_int = 3;
pub const SI_TIMER: ::c_int = 2;
pub const SI_QUEUE: ::c_int = 1;
pub const SI_USER: ::c_int = 0;
pub const SI_KERNEL: ::c_int = 128;
pub const NSIG: ::c_int = 65;
s_no_extra_traits! {
#[repr(C)]
    pub union sigval {
        pub sival_int: ::c_int,
        pub sival_ptr: *mut ::c_void,
    }
}
s! {
    pub struct siginfo_t {
        pub si_signo: ::c_int,
        pub si_code: ::c_int,
        pub si_errno: ::c_int,
        pub si_pid: ::pid_t,
        pub si_uid: ::uid_t,
        pub si_addr: *mut ::c_void,
        pub si_status: ::c_int,
        pub si_value: ::sigval,
    }
}
pub type __sighandler = ::Option<unsafe extern "C" fn(::c_int) -> ::c_void>;
pub type sigset_t = ::c_long;
s! {
    pub struct __stack {
        pub ss_sp: *mut ::c_void,
        pub ss_size: ::size_t,
        pub ss_flags: ::c_int,
    }
}
pub type stack_t = ::__stack;
s! {
    pub struct sigaction {
        pub sa_mask: ::sigset_t,
        pub sa_flags: ::c_int,
    }
}
s_no_extra_traits! {
#[repr(C)]
    pub union anon_signal_line154 {
        pub sa_handler: ::Option<unsafe extern "C" fn(::c_int) -> ::c_void>,
        pub sa_sigaction: ::Option<unsafe extern "C" fn(::c_int, *mut ::siginfo_t, *mut ::c_void) -> ::c_void>,
    }
}
s! {
    pub struct mcontext_t {
        pub oldmask: ::c_ulong,
        pub gregs: [::c_ulong; 16],
        pub pc: ::c_ulong,
        pub pr: ::c_ulong,
        pub sr: ::c_ulong,
        pub gbr: ::c_ulong,
        pub mach: ::c_ulong,
        pub macl: ::c_ulong,
        pub fpregs: [::c_ulong; 16],
        pub xfpregs: [::c_ulong; 16],
        pub fpscr: ::c_uint,
        pub fpul: ::c_uint,
        pub ownedfp: ::c_uint,
    }
}
s! {
    pub struct __ucontext {
        pub uc_flags: ::c_ulong,
        pub uc_link: *mut ::__ucontext,
        pub uc_stack: ::stack_t,
        pub uc_mcontext: ::mcontext_t,
        pub uc_sigmask: ::sigset_t,
    }
}
pub type ucontext_t = ::__ucontext;

// abi-bits/socket.h

// abi-bits/socklen_t.h

// abi-bits/stat.h
s! {
    pub struct timespec {
        pub tv_sec: ::time_t,
        pub tv_nsec: ::c_long,
    }
    pub struct stat {
        pub st_dev: ::dev_t,
        pub st_ino: ::ino_t,
        pub st_nlink: ::nlink_t,
        pub st_mode: ::mode_t,
        pub st_uid: ::uid_t,
        pub st_gid: ::gid_t,
        pub __pad0: ::c_uint,
        pub st_rdev: ::dev_t,
        pub st_size: ::off_t,
        pub st_blksize: ::blksize_t,
        pub st_blocks: ::blkcnt_t,
        pub st_atime: ::time_t,
        pub st_atime_nsec: i64,
        pub st_mtime: ::time_t,
        pub st_mtime_nsec: i64,
        pub st_ctime: ::time_t,
        pub st_ctime_nsec: i64,
        pub __unused: [::c_long; 3],
    }
}

// abi-bits/statfs.h
s! {
    pub struct __mlibc_fsid {
        pub __val: [::c_int; 2],
    }
}
pub type fsid_t = ::__mlibc_fsid;
s! {
    pub struct statfs {
        pub f_type: ::c_ulong,
        pub f_bsize: ::c_ulong,
        pub f_blocks: ::fsblkcnt_t,
        pub f_bfree: ::fsblkcnt_t,
        pub f_bavail: ::fsblkcnt_t,
        pub f_files: ::fsfilcnt_t,
        pub f_ffree: ::fsfilcnt_t,
        pub f_fsid: ::fsid_t,
        pub f_namelen: ::c_ulong,
        pub f_frsize: ::c_ulong,
        pub f_flags: ::c_ulong,
        pub __f_spare: [::c_ulong; 4],
    }
}

// abi-bits/statvfs.h
pub const ST_RDONLY: ::c_int = 1;
pub const ST_NOSUID: ::c_int = 2;
pub const ST_MANDLOCK: ::c_int = 64;
pub const FSTYPSZ: ::c_int = 16;
s! {
    pub struct statvfs {
        pub f_bsize: ::c_ulong,
        pub f_frsize: ::c_ulong,
        pub f_blocks: ::fsblkcnt_t,
        pub f_bfree: ::fsblkcnt_t,
        pub f_bavail: ::fsblkcnt_t,
        pub f_files: ::fsfilcnt_t,
        pub f_ffree: ::fsfilcnt_t,
        pub f_favail: ::fsfilcnt_t,
        pub f_fsid: ::c_ulong,
        pub f_basetype: [::c_char; 16],
        pub f_flag: ::c_ulong,
        pub f_namemax: ::c_ulong,
        pub f_fstr: [::c_char; 32],
        pub f_filler: [::c_ulong; 16],
    }
}

// abi-bits/statx.h
pub const STATX_TYPE: ::c_int = 0x1;
pub const STATX_MODE: ::c_int = 0x2;
pub const STATX_NLINK: ::c_int = 0x4;
pub const STATX_UID: ::c_int = 0x8;
pub const STATX_GID: ::c_int = 0x10;
pub const STATX_ATIME: ::c_int = 0x20;
pub const STATX_MTIME: ::c_int = 0x40;
pub const STATX_CTIME: ::c_int = 0x80;
pub const STATX_INO: ::c_int = 0x100;
pub const STATX_SIZE: ::c_int = 0x200;
pub const STATX_BLOCKS: ::c_int = 0x400;
pub const STATX_BASIC_STATS: ::c_int = 0x7ff;
pub const STATX_BTIME: ::c_int = 0x800;
pub const STATX_MNT_ID: ::c_int = 0x1000;
pub const STATX_DIOALIGN: ::c_int = 0x2000;
pub const STATX_ALL: ::c_int = 0xfff;
pub const STATX_ATTR_COMPRESSED: ::c_int = 0x4;
pub const STATX_ATTR_IMMUTABLE: ::c_int = 0x10;
pub const STATX_ATTR_APPEND: ::c_int = 0x20;
pub const STATX_ATTR_NODUMP: ::c_int = 0x40;
pub const STATX_ATTR_ENCRYPTED: ::c_int = 0x800;
pub const STATX_ATTR_AUTOMOUNT: ::c_int = 0x1000;
pub const STATX_ATTR_MOUNT_ROOT: ::c_int = 0x2000;
pub const STATX_ATTR_VERITY: ::c_int = 0x100000;
pub const STATX_ATTR_DAX: ::c_int = 0x200000;
s! {
    pub struct statx_timestamp {
        pub tv_sec: i64,
        pub tv_nsec: u32,
        pub __padding: u32,
    }
    pub struct statx {
        pub stx_mask: u32,
        pub stx_blksize: u32,
        pub stx_attributes: u64,
        pub stx_nlink: u32,
        pub stx_uid: u32,
        pub stx_gid: u32,
        pub stx_mode: u16,
        pub __padding: u16,
        pub stx_ino: u64,
        pub stx_size: u64,
        pub stx_blocks: u64,
        pub stx_attributes_mask: u64,
        pub stx_atime: ::statx_timestamp,
        pub stx_btime: ::statx_timestamp,
        pub stx_ctime: ::statx_timestamp,
        pub stx_mtime: ::statx_timestamp,
        pub stx_rdev_major: u32,
        pub stx_rdev_minor: u32,
        pub stx_dev_major: u32,
        pub stx_dev_minor: u32,
        pub stx_mnt_id: u64,
        pub stx_dio_mem_align: u32,
        pub stx_dio_offset_align: u32,
        pub __padding1: [u64; 12],
    }
}

// abi-bits/suseconds_t.h

// abi-bits/termios.h
pub const NCCS: usize = 32;
pub const VEOF: usize = 4;
pub const VTIME: ::c_int = 5;
pub const VMIN: ::c_int = 6;
pub const VSWTC: ::c_int = 7;
pub const VSTART: ::c_int = 8;
pub const VSTOP: ::c_int = 9;
pub const VSUSP: ::c_int = 10;
pub const VEOL: ::c_int = 11;
pub const VREPRINT: ::c_int = 12;
pub const VDISCARD: ::c_int = 13;
pub const VWERASE: ::c_int = 14;
pub const VEOL2: ::c_int = 16;
pub const IUCLC: ::c_uint = 0o001000;
pub const IXON: ::c_uint = 0o002000;
pub const IXOFF: ::c_uint = 0o010000;
pub const IUTF8: ::tcflag_t = 0o040000;
pub const OLCUC: ::tcflag_t = 0o000002;
pub const ONLCR: ::tcflag_t = 0o000004;
pub const NLDLY: ::tcflag_t = 0o000400;
pub const CRDLY: ::tcflag_t = 0o003000;
pub const CR1: ::tcflag_t = 0o001000;
pub const CR2: ::tcflag_t = 0o002000;
pub const CR3: ::tcflag_t = 0o003000;
pub const TABDLY: ::tcflag_t = 0o014000;
pub const TAB1: ::tcflag_t = 0o004000;
pub const TAB2: ::tcflag_t = 0o010000;
pub const TAB3: ::tcflag_t = 0o014000;
pub const BSDLY: ::tcflag_t = 0o020000;
pub const BS1: ::tcflag_t = 0o020000;
pub const FFDLY: ::tcflag_t = 0o100000;
pub const FF1: ::tcflag_t = 0o100000;
pub const VTDLY: ::tcflag_t = 0o040000;
pub const VT1: ::tcflag_t = 0o040000;
pub const CSIZE: ::tcflag_t = 0o000060;
pub const CS6: ::tcflag_t = 0o000020;
pub const CS7: ::tcflag_t = 0o000040;
pub const CS8: ::tcflag_t = 0o000060;
pub const CSTOPB: ::tcflag_t = 0o000100;
pub const CREAD: ::tcflag_t = 0o000200;
pub const PARENB: ::tcflag_t = 0o000400;
pub const PARODD: ::tcflag_t = 0o001000;
pub const HUPCL: ::tcflag_t = 0o002000;
pub const CLOCAL: ::tcflag_t = 0o004000;
pub const ISIG: ::tcflag_t = 0o000001;
pub const ICANON: ::tcflag_t = 0o000002;
pub const ECHOE: ::tcflag_t = 0o000020;
pub const ECHOK: ::tcflag_t = 0o000040;
pub const ECHONL: ::tcflag_t = 0o000100;
pub const NOFLSH: ::tcflag_t = 0o000200;
pub const TOSTOP: ::tcflag_t = 0o000400;
pub const IEXTEN: ::tcflag_t = 0o100000;
pub const EXTA: ::c_int = 0o000016;
pub const EXTB: ::c_int = 0o000017;
pub const CBAUD: ::c_int = 0o010017;
pub const CBAUDEX: ::c_int = 0o010000;
pub const CIBAUD: ::c_int = 0o02003600000;
pub const CMSPAR: ::tcflag_t = 0o10000000000;
pub const XCASE: ::c_int = 0o000004;
pub const ECHOCTL: ::tcflag_t = 0o001000;
pub const ECHOPRT: ::tcflag_t = 0o002000;
pub const ECHOKE: ::tcflag_t = 0o004000;
pub const FLUSHO: ::tcflag_t = 0o010000;
pub const PENDIN: ::tcflag_t = 0o040000;
pub const EXTPROC: ::tcflag_t = 0o200000;
pub const XTABS: ::tcflag_t = 0o014000;
pub const NCC: ::c_int = 8;
s! {
    pub struct termios {
        pub c_iflag: ::tcflag_t,
        pub c_oflag: ::tcflag_t,
        pub c_cflag: ::tcflag_t,
        pub c_lflag: ::tcflag_t,
        pub c_line: ::cc_t,
        pub c_cc: [::cc_t; 32],
        pub ibaud: ::speed_t,
        pub obaud: ::speed_t,
    }
    pub struct termio {
        pub c_iflag: ::c_ushort,
        pub c_oflag: ::c_ushort,
        pub c_cflag: ::c_ushort,
        pub c_lflag: ::c_ushort,
        pub c_line: ::c_uchar,
        pub c_cc: [::c_uchar; 8],
    }
}

// abi-bits/time.h
pub const ITIMER_REAL: ::c_int = 0;
pub const ITIMER_VIRTUAL: ::c_int = 1;
pub const ITIMER_PROF: ::c_int = 2;
s! {
    pub struct itimerval {
        pub it_interval: ::timeval,
        pub it_value: ::timeval,
    }
}

// abi-bits/uid_t.h

// abi-bits/utsname.h

// abi-bits/vm-flags.h
pub const MAP_ANON: ::c_int = 0x20;
pub const MAP_ANONYMOUS: ::c_int = 0x20;
pub const MAP_GROWSDOWN: ::c_int = 0x100;
pub const MAP_DENYWRITE: ::c_int = 0x800;
pub const MAP_EXECUTABLE: ::c_int = 0x1000;
pub const MAP_LOCKED: ::c_int = 0x2000;
pub const MAP_NORESERVE: ::c_int = 0x4000;
pub const MAP_POPULATE: ::c_int = 0x8000;
pub const MAP_NONBLOCK: ::c_int = 0x10000;
pub const MAP_STACK: ::c_int = 0x20000;
pub const MAP_HUGETLB: ::c_int = 0x40000;
pub const MAP_SYNC: ::c_int = 0x80000;
pub const MAP_FIXED_NOREPLACE: ::c_int = 0x100000;
pub const MCL_CURRENT: ::c_int = 0x01;
pub const MCL_FUTURE: ::c_int = 0x02;
pub const POSIX_MADV_NORMAL: ::c_int = 0;
pub const POSIX_MADV_RANDOM: ::c_int = 1;
pub const POSIX_MADV_SEQUENTIAL: ::c_int = 2;
pub const POSIX_MADV_WILLNEED: ::c_int = 3;
pub const POSIX_MADV_DONTNEED: ::c_int = 4;
pub const MADV_SOFT_OFFLINE: ::c_int = 101;
pub const MREMAP_MAYMOVE: ::c_int = 1;
pub const MREMAP_FIXED: ::c_int = 2;
pub const MFD_CLOEXEC: ::c_uint = 1;
pub const MFD_ALLOW_SEALING: ::c_uint = 2;
pub const MFD_HUGETLB: ::c_uint = 4;

// alloca.h
